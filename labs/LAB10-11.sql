-- Yulia Flenova
-- N01342767 
-- LAB 10/11

CREATE OR REPLACE PACKAGE HELLOFROM AS 
    PROCEDURE PROC_1;
END HELLOFROM;


CREATE OR REPLACE PACKAGE BODY HELLOFROM AS
    --PROCEDURE PROC_2;
    --PROCEDURE PROC_3;
    PROCEDURE PROC_1 IS 
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HELLO FROM PROC 1');
        PROC_2;
    END PROC_1;
    
    PROCEDURE PROC_2 IS
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HELLO FROM PROC 2');
        PROC_3;
    END PROC_2;
    
    PROCEDURE PROC_3 IS
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HELLO FROM PROC 3');
    END PROC_3;
    
END HELLOFROM;

SET SERVEROUTPUT ON
    BEGIN
    hellofrom.proc_1;
END; 

-- 10.2
DESCRIBE HELLOFROM;

--==============================================================================

CREATE OR REPLACE PACKAGE OVERLOAD AS 
    PROCEDURE WHAT_AM_I(P_STR IN VARCHAR);
    PROCEDURE WHAT_AM_I(P_NUM IN NUMBER);
    PROCEDURE WHAT_AM_I(P_DATE IN DATE);
END OVERLOAD;

CREATE OR REPLACE PACKAGE BODY OVERLOAD AS 
    PROCEDURE WHAT_AM_I(P_STR IN VARCHAR) IS
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HERE I AM A VARCHAR2');
    END WHAT_AM_I;
    PROCEDURE WHAT_AM_I(P_NUM IN NUMBER) IS
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HERE I AM A NUMBER');
    END WHAT_AM_I;
    PROCEDURE WHAT_AM_I(P_DATE IN DATE) IS
    BEGIN 
        DBMS_OUTPUT.PUT_LINE('HERE I AM A DATE');
    END WHAT_AM_I;
END OVERLOAD;

DESCRIBE OVERLOAD;


SET SERVEROUTPUT ON;
BEGIN
    OVERLOAD.WHAT_AM_I('YULIA FLENOVA');
END;
BEGIN
    OVERLOAD.WHAT_AM_I(1342767);
END;
BEGIN
    OVERLOAD.WHAT_AM_I(TO_DATE('2023-11-26', 'YYYY-MM-DD'));
END;

--=======================================================================
CREATE OR REPLACE PACKAGE time_conversion_cons AS  
    c_day_to_hr CONSTANT NUMBER := 24;   
    c_day_to_min    CONSTANT NUMBER := 1440; 
END TIME_CONVERSION_CONS;

SET SERVEROUTPUT ON;
DECLARE
  C_DAY_HR  CONSTANT NUMBER := 24;
  C_DAY_MIN CONSTANT NUMBER := 1440;
  C_HR_MIN  CONSTANT NUMBER := 60;
  C_MIN_SEC CONSTANT NUMBER := 60;

  V_DAYS    NUMBER := 2.5;
  V_HOURS   NUMBER := 1.8;
  V_MINUTES NUMBER := 13;
  V_SECONDS NUMBER := 720;
BEGIN
    DBMS_OUTPUT.PUT_LINE('FROM             TO             TO             TO ');
  DBMS_OUTPUT.PUT_LINE(V_DAYS || ' DAYS      ' ||
                       V_DAYS * C_DAY_HR || ' HOURS     ' ||
                       V_DAYS * C_DAY_MIN || ' MINUTES    ' ||
                       V_DAYS * C_DAY_MIN * C_MIN_SEC || ' SECONDS');

  DBMS_OUTPUT.PUT_LINE(V_HOURS || ' HOURS      ' ||
                       V_HOURS / C_DAY_HR || ' DAYS     ' ||
                       V_HOURS * C_HR_MIN || ' MINUTES    ' ||
                       V_HOURS * C_HR_MIN * C_MIN_SEC || ' SECONDS');

  DBMS_OUTPUT.PUT_LINE(V_MINUTES || ' MINUTES      ' ||
                       V_MINUTES * C_MIN_SEC * C_DAY_HR || ' DAYS     ' ||
                       V_MINUTES / C_HR_MIN || ' HOURS    ' ||
                       V_MINUTES * C_MIN_SEC || ' SECONDS');

  DBMS_OUTPUT.PUT_LINE(V_SECONDS || ' SECONDS      ' ||
                       V_SECONDS * C_MIN_SEC * C_DAY_HR || ' DAYS     ' ||
                       V_SECONDS / C_HR_MIN || ' HOURS    ' ||
                       V_SECONDS / C_MIN_SEC || ' MINUTES');
END;

--==============================================================================

CREATE OR REPLACE PACKAGE CHECK_EMP_PKG AS 
    G_MAX_LENGTH_OF_SERVICE CONSTANT NUMBER :=100;
    PROCEDURE CHK_HIREDATE(P_HIREDATE IN EMPLOYEES.HIRE_DATE%TYPE);
    PROCEDURE CHK_DEPT_MGR(P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE,P_MANAGER_ID IN EMPLOYEES.MANAGER_ID%TYPE);
END CHECK_EMP_PKG;

CREATE OR REPLACE PACKAGE BODY CHECK_EMP_PKG AS 
    PROCEDURE CHK_HIREDATE(P_HIREDATE IN EMPLOYEES.HIRE_DATE%TYPE) IS
    BEGIN
        IF MONTHS_BETWEEN(SYSDATE, P_HIREDATE) > G_MAX_LENGTH_OF_SERVICE * 12 THEN
            RAISE_APPLICATION_ERROR(-20001, 'MORE THAN 100');
        END IF;
    END CHK_HIREDATE;

    PROCEDURE CHK_DEPT_MGR(P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, 
                            P_MANAGER_ID IN EMPLOYEES.MANAGER_ID%TYPE) IS
        V_DEPT_MANAGER_ID EMPLOYEES.MANAGER_ID%TYPE;
    BEGIN
        SELECT MANAGER_ID INTO V_DEPT_MANAGER_ID
        FROM EMPLOYEES
        WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;

        IF V_DEPT_MANAGER_ID = P_MANAGER_ID THEN
            DBMS_OUTPUT.PUT_LINE('SUCCESS');
        ELSE
            RAISE_APPLICATION_ERROR(-20002, 'ERROR, NO MATCH');
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20003, 'ERROR, NOT FOUND');
    END CHK_DEPT_MGR;
END CHECK_EMP_PKG;

SET SERVEROUTPUT ON;
    BEGIN
      CHECK_EMP_PKG.CHK_DEPT_MGR(174, 149); 
      DBMS_OUTPUT.PUT_LINE('SUCCESS');
    
      CHECK_EMP_PKG.CHK_DEPT_MGR(174, 176); 
      DBMS_OUTPUT.PUT_LINE('ERROR');
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;


    BEGIN
      CHECK_EMP_PKG.CHK_HIREDATE('17-JAN-1987'); 
      DBMS_OUTPUT.PUT_LINE('SUCCESS'); 
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;
    