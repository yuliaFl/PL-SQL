--Yulia Flenova     N01342767 ||  ASSIGNMNET #2, DECEMBER 2023
-- QUESTION 1
-- BEGIN FUNCTION 
CREATE OR REPLACE FUNCTION AVG_SAL RETURN NUMBER IS 
-- VARIABLES FOR CALCULATIONS AVG = TOTAL_SALARY / NUM_EMPLOYEES
    AVG_SALARY NUMBER;
   TOTAL_SALARY NUMBER := 0; 
    NUM_EMPLOYEE NUMBER := 0;
    SALARY  EMPLOYEES.SALARY%TYPE;
    -- CURSOR WORKING WITH EMPLOYEES 
    CURSOR EMP_CURSOR IS 
    -- NEED TO GRAB THE SALARYS ONLY
        SELECT SALARY FROM EMPLOYEES;
BEGIN 
-- OPEN CURSOR
    OPEN EMP_CURSOR; 
    -- LOOP THROUGH ALL EMPLOYEES 
    LOOP 
    -- SAVE FOUND DATA INTO VARIABLE
        FETCH EMP_CURSOR INTO SALARY;
    -- EXIT WHEN NOTHING LEFT 
        EXIT WHEN EMP_CURSOR%NOTFOUND;
        -- ADD THE FETCHED SALARY TO TOTAL_SALRY, AND UPDATE THE VALUE AT THE SAME TIME
        TOTAL_SALARY := TOTAL_SALARY + SALARY;
        -- WITH EVERY FETCHED SALARY INCREASE COUNT OF EMPLOYEES 
        NUM_EMPLOYEE := NUM_EMPLOYEE + 1;
    END LOOP;
    
    -- CLOSE CURSOR
    CLOSE EMP_CURSOR;
    
    BEGIN
    -- WHAT THE FUNCTION WILL RETURN
        RETURN TOTAL_SALARY / NUM_EMPLOYEE;
  END;
END AVG_SAL;

SET SERVEROUTPUT ON;
DECLARE
    AVG_SALARY_RESULT NUMBER;
BEGIN
    -- STORE FUNCTION VALUE INTO VARIABLE RESULT
    AVG_SALARY_RESULT := AVG_SAL;
END;
--Yulia Flenova     N01342767 ||  ASSIGNMNET #2, DECEMBER 2023
-- QUESTION 2
-- FUNCTION WITH OPTION TO PASS VALUE 
CREATE OR REPLACE FUNCTION CHECK_LNAME(P_LAST_NAME IN VARCHAR2)
    RETURN BOOLEAN IS 
    --VARIABLES TO WORK WITH
    V_EMPLOYEE_LNAME EMPLOYEES.LAST_NAME%TYPE;
    V_FOUND BOOLEAN :=FALSE;â€¹
    -- CURSOR TO LOOK AT ONLY LAST_NAME
    CURSOR EMP_CURSOR IS 
        SELECT LAST_NAME FROM EMPLOYEES;  
BEGIN 
    OPEN EMP_CURSOR;
    -- SAVE FOUND LAST NAMES INTO VARIABLE
    FETCH EMP_CURSOR INTO V_EMPLOYEE_LNAME;
    -- WHILE NAMES EXIST IN CURSOR
    WHILE EMP_CURSOR%FOUND LOOP
    -- CHECK FOR MATCH
        IF P_LAST_NAME = V_EMPLOYEE_LNAME THEN
            V_FOUND := TRUE;
            EXIT;
        END IF;
        -- FETCH AGAIN
        FETCH EMP_CURSOR INTO V_EMPLOYEE_LNAME;
    END LOOP;
    CLOSE EMP_CURSOR;
    -- RETURN BOOL VALUE
    RETURN V_FOUND;
END CHECK_LNAME;

SELECT LAST_NAME FROM EMPLOYEES;

DECLARE 
    V_RESULT BOOLEAN;
BEGIN
    V_RESULT := CHECK_LNAME('FLENOVA');  
    IF V_RESULT THEN
        DBMS_OUTPUT.PUT_LINE('FOUND'); -- TESTED BELL
    ELSE 
        DBMS_OUTPUT.PUT_LINE('NOT FOUND'); -- TESTED FLENOVA
    END IF;
END;
--Yulia Flenova     N01342767 ||  ASSIGNMNET #2, DECEMBER 2023
-- QUESTION 3
CREATE OR REPLACE PROCEDURE CALC_TAX(
-- PARAMETERS
    P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE, -- IN
    P_ANNUAL_TAX OUT NUMBER -- OUT
) AS 
    V_SALARY EMPLOYEES.SALARY%TYPE; -- SALARY TO WORK WITH
BEGIN 
    SELECT SALARY INTO V_SALARY 
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = P_EMPLOYEE_ID; -- EMPLOYEE ID THAT WILL BE PASSED IN THE ANNONYMUS 
    -- CALCULATIONS
    P_ANNUAL_TAX := ((V_SALARY * 12) - 10000)* 0.09; 
END CALC_TAX;

DECLARE 
-- PASS NEEDED ID
    V_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE := 178;
    V_ANNUAL_TAX NUMBER;
BEGIN 
-- THE ID WILL BE IN AND TAX WILL BE AN OUT THAT WE RECIEVE
    CALC_TAX(V_EMPLOYEE_ID, V_ANNUAL_TAX); 
    DBMS_OUTPUT.PUT_LINE('TAX '||V_ANNUAL_TAX);
END;

--Yulia Flenova     N01342767 ||  ASSIGNMNET #2, DECEMBER 2023
-- QUESTION 4 
CREATE OR REPLACE PACKAGE EMP_PKG AS
-- ALL PUBLIC FUNCTINOS ARE CALLED IN THE PACKAGE
-- FUNCTIONS 
      -- PUBLIC FUNCTION TO CHECK FIRST NAME
      FUNCTION CHECK_FNAME (FIRST_NAME IN VARCHAR) RETURN BOOLEAN;
    
      -- PUBLIC FUNCTION FOR AVG SALARY
      FUNCTION AVG_SAL (salary1 IN NUMBER,salary2 IN NUMBER) RETURN NUMBER;
-- PROCEDURES
    -- Public Procedure 1
      PROCEDURE CHECK_FNAME (first_name IN VARCHAR2);
    
      -- Public Procedure 2
      PROCEDURE AVG_SAL (salary1 IN NUMBER, salary2 IN NUMBER, avg_result OUT NUMBER);
END EMP_PKG;

CREATE OR REPLACE PACKAGE BODY EMP_PKG AS
    PROCEDURE CALC_TAX (income IN NUMBER, tax_result OUT NUMBER) IS
    BEGIN
    tax_result := income * 0.13; 
  END CALC_TAX;
  
    -- Private function to calculate tax
  FUNCTION CALC_TAX (
    salary IN NUMBER
  ) RETURN NUMBER IS
    tax_rate CONSTANT NUMBER := 0.2; -- Example tax rate
    tax NUMBER;
  BEGIN
    -- Calculation of tax (example logic)
    tax := salary * tax_rate;
    RETURN tax;
  END CALC_TAX;

END EMP_PKG;
--Yulia Flenova     N01342767 ||  ASSIGNMNET #2, DECEMBER 2023
-- QUESTION 5
CREATE TABLE AUDIT_EMPLOYEES (
    EMPLOYEE_ID VARCHAR(100),
    OLD_EMPLOYEE_ID VARCHAR(100);
    ACTIONNAME VARCHAR(50));
    FIRST_NAME VARCHAR(100),
    OLD_FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    OLD_LAST_NAME VARCHAR(100),
    TIMESTAMP DATE
);

CREATE TRIGGER AUDIT_EMPLOYEES_TRIGG AFTER
FINSERT, UPDATE, DELETE ON EMPLOYEES FOR EACH ROW 
BEGIN

END;